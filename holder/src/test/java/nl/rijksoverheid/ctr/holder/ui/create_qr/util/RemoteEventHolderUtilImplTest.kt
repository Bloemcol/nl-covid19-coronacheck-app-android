package nl.rijksoverheid.ctr.holder.ui.create_qr.util

import com.squareup.moshi.Moshi
import com.squareup.moshi.adapters.PolymorphicJsonAdapterFactory
import com.squareup.moshi.kotlin.reflect.KotlinJsonAdapterFactory
import nl.rijksoverheid.ctr.api.json.Base64JsonAdapter
import nl.rijksoverheid.ctr.api.json.JsonObjectJsonAdapter
import nl.rijksoverheid.ctr.api.json.LocalDateJsonAdapter
import nl.rijksoverheid.ctr.api.json.OffsetDateTimeJsonAdapter
import nl.rijksoverheid.ctr.holder.ui.create_qr.api.OriginTypeJsonAdapter
import nl.rijksoverheid.ctr.holder.ui.create_qr.api.RemoteCouplingStatusJsonAdapter
import nl.rijksoverheid.ctr.holder.ui.create_qr.api.RemoteTestStatusJsonAdapter
import nl.rijksoverheid.ctr.holder.ui.create_qr.models.*
import org.junit.Test

import org.junit.Assert.*
import org.junit.runner.RunWith
import org.robolectric.RobolectricTestRunner

@RunWith(RobolectricTestRunner::class)
class RemoteEventHolderUtilImplTest {

//    2021-07-16 14:23:23.570 I/System.out: GIO data: eyJwcm90b2NvbFZlcnNpb24iOiIzLjAiLCJwcm92aWRlcklkZW50aWZpZXIiOiJaWloiLCJzdGF0dXMiOiJjb21wbGV0ZSIsImhvbGRlciI6eyJmaXJzdE5hbWUiOiJCb2IiLCJpbmZpeCI6IkRlIiwibGFzdE5hbWUiOiJCb3V3ZXIiLCJiaXJ0aERhdGUiOiIxOTYwLTAxLTAxIn0sImV2ZW50cyI6W3sidHlwZSI6InJlY292ZXJ5IiwidW5pcXVlIjoiOWMwMDljZTg1MmM5YTQ2OTlhMDY0ZGMxMTNlZTY0ZDBiM2EwYjlhNiIsImlzU3BlY2ltZW4iOnRydWUsInJlY292ZXJ5Ijp7ImNvdW50cnkiOiJOTEQiLCJzYW1wbGVEYXRlIjoiMjAyMS0wNy0wMiIsInZhbGlkRnJvbSI6IjIwMjEtMDctMDIiLCJ2YWxpZFVudGlsIjoiMjAyMi0wMS0xMSJ9fV19
//    2021-07-16 14:29:59.109 I/System.out: GIO data: {"protocolVersion":"3.0","providerIdentifier":"ZZZ","status":"complete","holder":{"firstName":"Bob","infix":"De","lastName":"Bouwer","birthDate":"1960-01-01"},"events":[{"type":"recovery","unique":"9c009ce852c9a4699a064dc113ee64d0b3a0b9a6","isSpecimen":true,"recovery":{"country":"NLD","sampleDate":"2021-07-02","validFrom":"2021-07-02","validUntil":"2022-01-11"}}]}

//    {"rawResponse":"eyJzaWduYXR1cmUiOiJNSUlkbGdZSktvWklodmNOQVFjQ29JSWRoekNDSFlNQ0FRRXhEVEFMQmdsZ2hrZ0JaUU1FQWdFd0N3WUpLb1pJaHZjTkFRY0JvSUlhNnpDQ0JYQXdnZ05Zb0FNQ0FRSUNCQUNZbG8wd0RRWUpLb1pJaHZjTkFRRUxCUUF3V0RFTE1Ba0dBMVVFQmhNQ1Rrd3hIakFjQmdOVkJBb01GVk4wWVdGMElHUmxjaUJPWldSbGNteGhibVJsYmpFcE1DY0dBMVVFQXd3Z1UzUmhZWFFnWkdWeUlFNWxaR1Z5YkdGdVpHVnVJRVZXSUZKdmIzUWdRMEV3SGhjTk1UQXhNakE0TVRFeE9USTVXaGNOTWpJeE1qQTRNVEV4TURJNFdqQllNUXN3Q1FZRFZRUUdFd0pPVERFZU1Cd0dBMVVFQ2d3VlUzUmhZWFFnWkdWeUlFNWxaR1Z5YkdGdVpHVnVNU2t3SndZRFZRUUREQ0JUZEdGaGRDQmtaWElnVG1Wa1pYSnNZVzVrWlc0Z1JWWWdVbTl2ZENCRFFUQ0NBaUl3RFFZSktvWklodmNOQVFFQkJRQURnZ0lQQURDQ0Fnb0NnZ0lCQU9QSGZvbjVKRXM2MGpPRE5TeHA3TndKcE9OUnFDVXJlYmdJUGVDUnVvU0Z4b1dreXViSkxsT2t5U1FlL1ZWbWNWMHN4V0JvQkxmWndsSW1PSWlrMWp0QXBzTE5QODJZazdOVUZGaVdWZFZRL29hdHBHTi9YSWYyanVZbmttY1hrZ0lETE56V1puVHQzV2Yvd1dHTlkwOFBtMjBYTUNidnE5SWZFS0Q1eFg4V2FZRURSKzBlYUkxeW9VMnlKc2E2YkY5dDFxL1JzUk9PcWEzelhtbDFKaGcrUVNzaGYrNkxYUWNHblVQRUtRb3IvQ28raHNzOGd6cjV5UTNheFpuaXZIaEJNM2Jodnk5ZDVhU1lVQXdWM2VENm5IODRhTkN5cG5xbjBURzlmb3BZSjBPenVqT1IwNmVZRlZ5YTV0TVBkZG44UVppWFBxb2wyNCtTTHJCN0RGL3hZNmszK1p0MWFVd29KaVhhMWZJU2NFVlY0OTl6WGpmMUlXeVFqalZheWRNajY5UEF2bmlzUWloWVpxVkdiWEFDMXhENVMxVDhYWVpLaDg5L3lrV3NFVnExSUZHTkw0aEhsem5BejdyQVFnRkFtVWdoQzJ1bjB2MlcxZEcrUnAxSjRBdW1vQ0pPT05EQlBEQzhjSThzZGN6UXhZeFJPejJVQ0dRbVlYMjV3MldQRkp3aDBLcjlGM0lEajcyYmpPWmVVNTY1bmUrQ3UrRzg0bkpCV3lHVTAwVTNsTkhmQ1RsZDV5T3FtaDNLYmFnS2hvV0tncjVDQjlieU9JSnoyb2RiNVR6VG5qNm5PNTcwQTdQNThYMFRkQUwvdTZIbCtnQjVIS1ptUVloY1lGZW1MZ25FdXYyYXo2Y2ZRTU83ekZvS1ZVczdPSFpSdUdPTGhKUVc1bGJ6QWdNQkFBR2pRakJBTUE4R0ExVWRFd0VCL3dRRk1BTUJBZjh3RGdZRFZSMFBBUUgvQkFRREFnRUdNQjBHQTFVZERnUVdCQlQrcXdDUW1KNGsvS25NR29yN0o3aS9NRzZvT3pBTkJna3Foa2lHOXcwQkFRc0ZBQU9DQWdFQXozY3NibGErVHJPMmhBQ1VxMGZKRGRKMng0YWZIUWZUdHJTN0NIaXZhZElMU2Q0enhheXR3b2dDZlFhM05RTEJZTW0veE9pVTN0VFRxUk1sV3Y1dW9xNTlCZHg5ODJ6d2ZxYU43dG5YemxnWDZLa3Bybk5JaCtlYnltNHBvV1JmR1JQM3JnWVEvMUhHbTAxVkpVK1RtUkFCVTNYeEU4N0hwa0ZCMHIrSXBYOUYvS3k0cGJVekRJTEUrd2YyYXVVbGhGOEd5c0dHT1JIYldNMTNPeXpDVEE5ZW11UHdxejVoRzFBa3dzRDA4Um53RVNtMnBSZ0NtOWRqVEhDTVI2TURRMXk1WFVhZ0RXLy9XWTYrM1o5eXcxc3IzNHhienVVTVJteVNzZ3FqVEZSQ0dCVVNHTDNhL0xwMGJ2L0J0cUJrMktsZlZhNmZYR3AybHRoelo0ZjdUWDljN21uS2N4RDdpcW45bnIwMk9FbEpoL1FPRlBEcGg3Zy9wMDk2V281NTFKUGt1MmhTaEt4czZmT1ljRlZ5TXZrMHF5dEp0YzBnWXVRNmVtZGpxNWJjYmE2WDdQeWZkbGFJTG1iUFc3YkpwTERYQmJyaEp5K1R1eVlxb3BPd0cvT092aDFBbzdrMmp6NkNHaHBlaU9wUStGbmlnMFlwQytORVhPR1Z0bW1RbWhSdmw2NkJ6Mmp2bVpxK3RlZmhmL2o2RTBjV1RNeHRDRURuaTNodlVJSkVVRDltQm9xclE0UldTZzhnTFlZTzlkTGIwbnFLUzgybDZFN3hYaVlsQVZram9IN1M5bjRoVjljbnZCVlhUS1JHd2VDREhneE1UUjlQQmhuaSthajBPb0toc25sRGVkYXRiM29ua0FPazZpU0hQOW05MmVueVgxQkpITzdzMXk0d2dnYmRNSUlFeGFBREFnRUNBaFJjQ1pvMGRUU2dxeEZKT3huVldsT0t4cXgwdURBTkJna3Foa2lHOXcwQkFRc0ZBREJZTVFzd0NRWURWUVFHRXdKT1RERWVNQndHQTFVRUNnd1ZVM1JoWVhRZ1pHVnlJRTVsWkdWeWJHRnVaR1Z1TVNrd0p3WURWUVFERENCVGRHRmhkQ0JrWlhJZ1RtVmtaWEpzWVc1a1pXNGdSVllnVW05dmRDQkRRVEFlRncweU1EQTNNamt4TnpJMk1qUmFGdzB5TWpFeU1EWXdNREF3TURCYU1HTXhDekFKQmdOVkJBWVRBazVNTVI0d0hBWURWUVFLREJWVGRHRmhkQ0JrWlhJZ1RtVmtaWEpzWVc1a1pXNHhOREF5QmdOVkJBTU1LMU4wWVdGMElHUmxjaUJPWldSbGNteGhibVJsYmlCRWIyMWxhVzRnVTJWeWRtVnlJRU5CSURJd01qQXdnZ0lpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElDRHdBd2dnSUtBb0lDQVFEWjg0dFZvTUk2LzcvdWJyTitrNmthc3FWV0NrQzQyOGozc09OeU9SMyt1cHdxY0lxWUpmOXRyNHRxMXU4Q1FGTkFId29jcVJTM0lVT3orMjZRdGpoa1UvSE5RNmR2NHF4WVRZWVBJYStoc0x2b0lONGlFVlhyVERIQXVpWnA1ZDNKdnQwV0RIREZRR3RZWUozL3BJbHMxOTc0L1NKSkJCNnhqYWkvVW5lUDliejJ0R2JuOTVIQmdqbjRMd0FLd2h1UVA1MEtULytFUGdsVkFVa3FzMTh0ZzV6alhTYVBuWUZCQUlFQ3FFSHhrRG84Vm9vS05JNHVCWms2Vlo2bjA2UHZvOE9kOEI1OW1mbkJLblY4TGlGa1Yyd1NQeDdoVDRtY0p0VGlQR1J3bjFCOVJqaVJNWWNjaCtXdWRRSUxxemtxMXVpemM0TlB0WVBicVgxcEFpdENPVndtR3BaTlc1Y2s2ZHRaZjZXNEtRc2YyZlBlMzNRci91b1RpcHFES2hGTnVaV2lHNEkxSkJtTWxUVm1LMno4VFlGWjNheHVhd1ZRc3ZhZG9mMUhBd2swb3FjbUZsL0l2M1IrRWZvU0RwS212VkhXUVhqT2VPVnExeGZGY2JzODE5NnhSSUNKUjJmZVYwNkpSNFlOT0NyMUszT0t2akFnZytsZEwvdzVGSDFQaXJPTzJpR1ZaWlBNT2tJTWtsdmQ3R041aUREYTc2dnRidnRaZkMxMUhVM1VNaFJQbXI5WFYxRitTVUhIdHQ3S01tdXhlQ1ZqSmJlQ2ZWcVRKY3JjRzdIOUV0UTU2dkp3UGFJWVhVNDgzanVGWFBtSkx4
//        a09hRUNPbzRoWFhwOVhnTGpDZWw4bEIwMUhqcllLbEZ1ODRiTncrVC9MR1BLRnFSQnBlMzllRFFJREFRQUJvNElCa2pDQ0FZNHdjUVlJS3dZQkJRVUhBUUVFWlRCak1ETUdDQ3NHQVFVRkJ6QUNoaWRvZEhSd09pOHZZMlZ5ZEM1d2EybHZkbVZ5YUdWcFpDNXViQzlGVmxKdmIzUkRRUzVqWlhJd0xBWUlLd1lCQlFVSE1BR0dJR2gwZEhBNkx5OWxkbkp2YjNSdlkzTndMbkJyYVc5MlpYSm9aV2xrTG01c01CMEdBMVVkRGdRV0JCUmFYVFFsd1lpUmMvbmU0UXpWOU9vWXZ6QTBiakFQQmdOVkhSTUJBZjhFQlRBREFRSC9NQjhHQTFVZEl3UVlNQmFBRlA2ckFKQ1luaVQ4cWN3YWl2c251TDh3YnFnN01Ga0dBMVVkSUFSU01GQXdEQVlLWUlRUUFZZHJBUUlGQ0RBMkJncGdoQkFCaDJzQkFnVUpNQ2d3SmdZSUt3WUJCUVVIQWdFV0dtaDBkSEJ6T2k4dlkzQnpMbkJyYVc5MlpYSm9aV2xrTG01c01BZ0dCbWVCREFFQ0FqQStCZ05WSFI4RU56QTFNRE9nTWFBdmhpMW9kSFJ3T2k4dlkzSnNMbkJyYVc5MlpYSm9aV2xrTG01c0wwVldVbTl2ZEV4aGRHVnpkRU5TVEM1amNtd3dEZ1lEVlIwUEFRSC9CQVFEQWdFR01CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUNCZ2dyQmdFRkJRY0RBVEFOQmdrcWhraUc5dzBCQVFzRkFBT0NBZ0VBQW10bGpUdGhkR1JrSzEvQk13VHZCSXRBcXZJR1pnbzdHTHlYZHVSK3hBbEs1TlBsdkdjZkpMNnU4bUVNWi9PYUl1NjFCd1AxeWRSVE00K2FRclB0VmdBRFk3L21tdlRqMUt1b0xJWmJZZ2E5RzJyL000YksvdVNORVZ1cit2dnRXODZ3NlY2U1p2Sm12TWhlb2JoUjN3dDlkNDdrNzNWaW9Mb0poUTc0V2hzbko1SmtaZnJpamcvSStJZmRmQ0JnNXdxSkFGbUQyNldBaEIwY05LZEc5cm5SbUNOMnRHWkFOVSt1czNWcjF2cTI3MWJGbjFsZWxCTlZ6NCtpUEhNSzQvTmw2dlh2eUdFVWprNkluQnREYm15c2UxWjAxOXcrNThsL0dPRUdhU3ZTMmdYMFdYWGNaaGJsQ2x6QzJQQjlIK1JyMDRwN1pXRFpOdkdpUDBUekFHVmRvUzJIeXU2LzNuNkp6MGp5UkxRU0RQV0tvanMwQ0R6TS96VzhkTUN5cWdCRUViWEUyU0EzKzRZdGxpZ1NHQm5ObkVDVThoRU1CbkdtSkVtNHRoSm5tdnRwTEdqSFdnSXloQ1h2a2JEc1pTL3FGY2pwZ29lNEp3Q1Y0cmpaenFnaGdaV1duTEpwSWRDUnJKbzFLb3B2TEM5M1NlUVUwaDgxaEN4N2RrbDB0K2x6Yk5PNmIxTStBek9CR1dKaEhNc09TZUwvaHR6aXZTY2hDTHNJOTAxNjdGUUgzRmc1TUQrVXdOTFBqTTdPdWZIWHdLb3B3NnJlSEg4QWlGQURpSXhJQVJ5NmlUSjkwVDVrdE5pbzFmQSs2bkd1NE4yN1lpemtnYXVSd09LK3R4aEliNExSNHJ2K1oxSDgyU2RWaTNLaDhDelV6NVFLNVY1dzZxdEEvNnN3Z2didk1JSUUxNkFEQWdFQ0FoUjBtS2d6VUNHWVd0MHBSYkxSV2RrcGN6dmEzVEFOQmdrcWhraUc5dzBCQVFzRkFEQmpNUXN3Q1FZRFZRUUdFd0pPVERFZU1Cd0dBMVVFQ2d3VlUzUmhZWFFnWkdWeUlFNWxaR1Z5YkdGdVpHVnVNVFF3TWdZRFZRUUREQ3RUZEdGaGRDQmtaWElnVG1Wa1pYSnNZVzVrWlc0Z1JHOXRaV2x1SUZObGNuWmxjaUJEUVNBeU1ESXdNQjRYRFRJd01EY3lPVEU0TWpNMU5Gb1hEVEl5TVRJd05UQXdNREF3TUZvd1NURUxNQWtHQTFVRUJoTUNUa3d4RVRBUEJnTlZCQW9NQ0V0UVRpQkNMbFl1TVNjd0pRWURWUVFEREI1TFVFNGdVRXRKYjNabGNtaGxhV1FnVTJWeWRtVnlJRU5CSURJd01qQXdnZ0lpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElDRHdBd2dnSUtBb0lDQVFEemE2TGsweHZuanF4MSticFM4dVprclFUWVhBUlNRUmhhdGszN3ZsQXBNQWw5bmI3TkdHWUZ5c1J2bFBzVnRRTHUvdFA4YUlyUjBTbkV6UXZRdm5LTXpVMGZCRXlXVFFsa2dZenFnM1NWellhRndvaGpEeXgxK3pyV21TZ2p0VjNkT1lYTUVtazFpaU9QcnIyQ1ZoRjc3ZU11MWRNMk1PVy9WcVJxa2ZwQ2xCaDZpc252MlNWVTFJbmlpTHRndExML01LWlUrNDNvZFZqaHpVVDl2TmpTWlVYUlFwTTB2VWZaM0c1MDVYcnZrZnA4ZkYrTVg0S2hqY3Rway8xVUZVeVNVaDl1d01oaXgrWGdLakVHV1hlS3dFeEY5eFpXZm5SYU9uMzFuWVhRRjVySXU3L0MzdHUyZlRlTDgxay93VzUreHA0NklyZEhnVzZrYk9aV3hjdmRudU5YMkt5ZjFZVWNFNjIzcGxGZm1Sckh2K2dIWUhINXJOOE5VZ2poNTduR2EzaEEweElnUHJOUml4SHRWK1RzWU5CSlc4WFJmMzJYUGN2UHVkVm9PaWROTlNLTzVNZE5Fa0lueGVlMmdvZHFkaDFsUlc4N0UxL0E1b2g1MEd4U3FNN2FScGNoWHdPV1pTaXhPU0xHdEpoTjQxcElqZ1JiNmpsbmJmMzBrTmdOUjQ3QWxsTi82NHBTemo5WFk0b1I3N3ZxeHR2Y0FON2FoV21Rc3RLS3p4S1R6TURsOXIwU09tankwdHd1U0J0WCtOWmdQMWRHZWJTV0JxN0YrSjM5Q3NicytwUDhMVzJJQVlBK1JpYnNKdG9VeThLVERMejhjVFczWXNBbk9pUDM4Y0lUSnZiU3h1bXluRTc0UU9QREo5dW41aDVjWnZqRFRCZi9rYnV3MXdJREFRQUJvNElCc3pDQ0FhOHdnWUlHQ0NzR0FRVUZCd0VCQkhZd2REQTlCZ2dyQmdFRkJRY3dBb1l4YUhSMGNEb3ZMMk5sY25RdWNHdHBiM1psY21obGFXUXVibXd2Ukc5dFpXbHVVMlZ5ZG1WeVEwRXlNREl3TG1ObGNqQXpCZ2dyQmdFRkJRY3dBWVluYUhSMGNEb3ZMMlJ2YlhObGNuWmxjakl3TWpCdlkzTndMbkJyYVc5MlpYSm9aV2xrTG01c01CMEdBMVVkRGdRV0JCUUlTcXE3bVNSdnZsc0g4YVdLbVZzdFIrKzVQREFTQmdOVkhSTUJBZjhFQ0RBR0FRSC9BZ0VBTUI4R0ExVWRJd1FZTUJhQUZGcGROQ1hCaUpGeitkN2hETlgwNmhpL01EUnVNRmtHQTFVZElBUlNNRkF3REFZS1lJUVFBWWRyQVFJRkNEQTJCZ3BnaEJBQmgyc0JBZ1VKTUNnd0pnWUlLd1lCQlFVSEFnRVdHbWgwZEhCek9pOHZZM0J6TG5CcmFXOTJaWEpvWldsa0xtNXNNQWdHQm1lQkRBRUNBakJLQmdOVkhSOEVRekJCTUQrZ1BhQTdoamxvZEhSd09pOHZZM0pzTG5CcmFXOTJaWEpvWldsa0xtNXNMMFJ2YldWcGJsTmxjblpsY2tOQk1qQXlNRXhoZEdWemRFTlNUQzVqY213d0RnWURWUjBQQVFIL0JBUURBZ0VHTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQ0JnZ3JCZ0VGQlFjREFUQU5CZ2txaGtpRzl3MEJBUXNGQUFPQ0Fn
//        RUFtRmIxYTd1U08zOUFWTC94WFEwbU1GUDZJOTBPbnZRZk4zSWVjd3R2QmE2V3U0WGR3MDJMNUpYa09IZTRNT212SzNEbWdlRmhNVUNHdTMzR2hBMG92MldJcHh1aEhoSUtGZDZVMXdKMExkQXFLTkZZdXR4NVk4dHAyYUFOakF6R3dtUTVCckpaMlJEdi9JZHNYYzZ2eVdNWktsdmdnRTFHbURTbmZzVEtoNWpvWDVHc1oxeVNqQmgrd3ExT1N2eHdmRXlWdnlpcEdnTWkxOVk3bWY4Zm1JUkVrdkI3YWVneFAwcHVlaW8zSHhaTHQxVElsMGdZRDRFUE8ybmc2YUl5UzYyT1pTZnFnVlNUVEJqQWQ2TjgzSm9CMEV0UC9nRGdFR2duSUNwRmNxTGlDMll1Z1pvU3NLTklUM0RyUDJEeUNxMjhHcTF4SkFud1cydmRLTUZSWXVnQis4aXJKVDY1TDcrYmJuNUJEUitYWTlxVW9kM2ptSThEQzk2a2VxRmQydFlUbG5HaXM1NE5reGVDUW1wVVIzaFFTZkJuaWdDVjhBV0lwQkxrTlJ4RFNtNEZRN08xekFNQldCTWt1ZFlqUHQ0NjczbHFlMDU1WG1lUEorcWx2a2xHUVA1UjdPU2U1TWlQSmt3ZUFuTVBlVGNOK2Jza0VybEszSTIrVEdPaE1BR2J1RkJJb3ZlWmFwc0t0UW5jYUJ6Vno3eEZpTTJIN1k0RHlEVzVYUUFyVE1jUWx4TkdjVmRjbGFHajk5azJpSy9PelozNFhuYVo2WlhFUHpacVdaTEhNQ2lhWStrbEIvY0psYmg3bW12QTVxelQ5SkorV1pyM1c5eFA3RjFLL1lkLzRqUHNrSEFZY3BuM2VCL3BDYjZwanBldGw5a2xKTTRLZS8wUzU2WXdnZ2VmTUlJRmg2QURBZ0VDQWhRR3MxNW1CeERGOXIxUjZuaE90bEtQcU1oUTBEQU5CZ2txaGtpRzl3MEJBUXNGQURCSk1Rc3dDUVlEVlFRR0V3Sk9UREVSTUE4R0ExVUVDZ3dJUzFCT0lFSXVWaTR4SnpBbEJnTlZCQU1NSGt0UVRpQlFTMGx2ZG1WeWFHVnBaQ0JUWlhKMlpYSWdRMEVnTWpBeU1EQWVGdzB5TVRBeE1UUXhOVEF4TWpGYUZ3MHlNakF4TVRReE5UQXhNakZhTUlHRE1Rc3dDUVlEVlFRR0V3Sk9UREVXTUJRR0ExVUVCd3dOSjNNdFIzSmhkbVZ1YUdGblpURTVNRGNHQTFVRUNnd3dUV2x1YVhOMFpYSnBaU0IyWVc0Z1ZtOXNhM05uWlhwdmJtUm9aV2xrTENCWFpXeDZhV3B1SUdWdUlGTndiM0owTVNFd0h3WURWUVFEREJoaGNHa3RkR1Z6ZEM1amIzSnZibUYwWlhOMFpYSXVibXd3Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRRG9CUlIwcVdITTJFT0IvMzVuWmZ0bnpkL1N1ZXN4TWdlazNoRWhkNFRNWHRyTk9SbFA1QjQwSE50TU5Oejc3b2xqdERWbU9MNDBXY3IrQnQrdFVPY0IyM0NFcXJ2aitZR0ZlQVJQbUJ2YkhRd1JLSlBhYmQwZGp3N1Bjb0U0SHhwOWxESEZ1U2NCdVdEdytRYk52MWYrT1ZlVjhSZnBPRUVVSDJYL3M1bEREeVNjUFRzRDE2Q1dXTjJCNElFOEF1M2RoMXRxcDg5dUMrNFYrUC9DSGhpQkNxeThYUnlVMFR2T2dxZU9xNzMyOHd3VFdOK0RPQUIyWFNKWFZJRGhLdHpRKzd3WDRROTlrcDA4MnRBNEJhV25Bak9Gb2hqRVFNSEJvamRTWmI2eTNLTlVLTnVqeGZEMkJ6dTdUemYwQnFwRkE4VWxXdFB4emNGaU0yRVVSb2lyQWdNQkFBR2pnZ05DTUlJRFBqQU1CZ05WSFJNQkFmOEVBakFBTUI4R0ExVWRJd1FZTUJhQUZBaEtxcnVaSkcrK1d3ZnhwWXFaV3kxSDc3azhNSUdKQmdnckJnRUZCUWNCQVFSOU1Ic3dUUVlJS3dZQkJRVUhNQUtHUVdoMGRIQTZMeTlqWlhKMExtMWhibUZuWldSd2Eya3VZMjl0TDBOQlkyVnlkSE12UzFCT1VFdEpiM1psY21obGFXUlRaWEoyWlhKRFFUSXdNakF1WTJWeU1Db0dDQ3NHQVFVRkJ6QUJoaDVvZEhSd09pOHZiMk56Y0RJd01qQXViV0Z1WVdkbFpIQnJhUzVqYjIwd0l3WURWUjBSQkJ3d0dvSVlZWEJwTFhSbGMzUXVZMjl5YjI1aGRHVnpkR1Z5TG01c01JR3hCZ05WSFNBRWdha3dnYVl3Q0FZR1o0RU1BUUlDTUlHWkJncGdoQkFCaDJzQkFnVUpNSUdLTURjR0NDc0dBUVVGQndJQkZpdG9kSFJ3Y3pvdkwyTmxjblJwWm1sallXRjBMbXR3Ymk1amIyMHZjR3RwYjNabGNtaGxhV1F2WTNCek1FOEdDQ3NHQVFVRkJ3SUNNRU1NUVU5d0lHUnBkQ0JqWlhKMGFXWnBZMkZoZENCcGN5Qm9aWFFnUTFCVElGQkxTVzkyWlhKb1pXbGtJSFpoYmlCTFVFNGdkbUZ1SUhSdlpYQmhjM05wYm1jdU1CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUNCZ2dyQmdFRkJRY0RBVEJUQmdOVkhSOEVUREJLTUVpZ1JxQkVoa0pvZEhSd09pOHZZM0pzTG0xaGJtRm5aV1J3YTJrdVkyOXRMMHRRVGxCTFNXOTJaWEpvWldsa1UyVnlkbVZ5UTBFeU1ESXdMMHhoZEdWemRFTlNUQzVqY213d0hRWURWUjBPQkJZRUZNWkpsSHFnMlB6ZHIwbFV6Z2FBS2pqSm5jNnJNQTRHQTFVZER3RUIvd1FFQXdJRm9EQ0NBUU1HQ2lzR0FRUUIxbmtDQkFJRWdmUUVnZkVBN3dCMkFFYWxWZXQxK3BFZ01MV2lpV24wODMwUkxFRjB2djFKdUlXcjh2eHcvbTFIQUFBQmR3RnFZMkFBQUFRREFFY3dSUUloQUp4alZXSXk1UTVuY1FZaTU4eWJISy9kTEh5N1JpdUhwOWJXaWhVTDVOMm1BaUJlTjVydFFtUTJCa2ViTUpHNHBnMVc2Z2EvUDVVVGJ5Ry9qSERWREJTUE9BQjFBRzlUZHF3eDhERVoySmtBcEZFVi8zY1ZIQkhaQXNFQUtRYU5zZ2lhTjlrVEFBQUJkd0ZxWTJrQUFBUURBRVl3UkFJZ1Byd2pQTjRkT1BOQmFvcFZaVHdLeWZ1K2wweFhWelBsME5ZeDdNQTJrWE1DSUVjaEdkRWtzKzdFeFZHTG9YWDJBWjhoMWthd1NIcWZpdzYyS0svL1prNlBNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUNBUUE2YWIzSm11andKWk9ad1JPWElHcHdNVUlyelJGa3VPKzRIU1FKRXdTU1FCTGJLeE9YMGVMSC9jM3Q2cGNoQndOZFFoN0llWDFwTXllOEgrQkQxcW1INkRjVUpHTjJoR3c5bmNXVFFNWmg1WXdacHcvODlvZWN2MDMxN0FiUitzcG0vMHVNZ2FMWUtGdzB6Tmdabzk3R0FsMzdSMW83aldYTzVKbTNKa2dha205UE56TDJ6a1ZCa3IySiszUjBaNDVoR1RXRk4vTDRpMHBpb3pSN0c2bkF0aGkvN3pOMXI4bGMwMW5NTytFOFc0bUJWVmZPN1ZsZVl6amREUC9hYSt2T0RQNXFsbUFMMUlYT1lOcjdTVkVmUGcwS2w3bXNpZXFwMHo0Vmt4SDlHWHR0QitURTJtelZaWFpqU0pJRkN3STU1T2VQSGlEYm42Y2dVQzZHU3dMd0lzSnRCY3d6YnlKYnJaMnBTRWxLQ0JabkYwZG1Xd0ZWV29IMXJ4aVZTbkN0L3FrS0pv
//        L2xUZU9hS05TUFZhQnk3TmphdlJqZTMzZjJNNC92QmZXT2hpdVlTSmllaUxzM2NJNEUxOGdaRFpScVlVNmNUUk43dEkzMktOUU5OV1pLQnArN0JCZVJiSERhUjRBVktPWkJUWU5NdGxGaEFGS1QvamZGS3Y4QXJaZTRNOGp5V09CS3VncnpDbzhvaVAxZENUY2laT0R3RjE1ZTVpaURJVm5zMk5pVzlHZ29Ld3VUS0Z0TzFjaEtCVnd0cHBHQ0kvZGN6RXV5STd0VTI4ZHhDUTFFT3diMnBpZ1dQd3cwUUU2TXRMUmdYTUN0bkRQTnArR1VtUUUvSTIwUlVaWTJLdXVka2tpYU9paE94bEpPQ3ZsYzgxU1RUV3hOa2o1UFZzYlc2akdDQW5Fd2dnSnRBZ0VCTUdFd1NURUxNQWtHQTFVRUJoTUNUa3d4RVRBUEJnTlZCQW9NQ0V0UVRpQkNMbFl1TVNjd0pRWURWUVFEREI1TFVFNGdVRXRKYjNabGNtaGxhV1FnVTJWeWRtVnlJRU5CSURJd01qQUNGQWF6WG1ZSEVNWDJ2VkhxZUU2MlVvK295RkRRTUFzR0NXQ0dTQUZsQXdRQ0FhQ0I1REFZQmdrcWhraUc5dzBCQ1FNeEN3WUpLb1pJaHZjTkFRY0JNQndHQ1NxR1NJYjNEUUVKQlRFUEZ3MHlNVEEzTVRZeE1qVTFOVFZhTUM4R0NTcUdTSWIzRFFFSkJERWlCQ0RRZXRPeTBJaERuQzh0NXhCci9EMzVhQ3FjRW1Gb1VPRXlUZmU0S3ZsakhUQjVCZ2txaGtpRzl3MEJDUTh4YkRCcU1Bc0dDV0NHU0FGbEF3UUJLakFMQmdsZ2hrZ0JaUU1FQVJZd0N3WUpZSVpJQVdVREJBRUNNQW9HQ0NxR1NJYjNEUU1ITUE0R0NDcUdTSWIzRFFNQ0FnSUFnREFOQmdncWhraUc5dzBEQWdJQlFEQUhCZ1VyRGdNQ0J6QU5CZ2dxaGtpRzl3MERBZ0lCS0RBTkJna3Foa2lHOXcwQkFRRUZBQVNDQVFEVmJqY05yYkM3NzduTVk3V2JlTG9MbE5uaFZHY0ZsVVlRdDJpa3VkWEIzcFpaZk5oeUFzaUdLeVFEUlhVQWpOcXVlZWtZNGtFNFJIb1o5NFpLcHZ2MTVVSnM2ZG5mN04weU9MZUdsTHlXc2o4eXBjd3lnSXYwcDJuNVNaaUQ4KzVHSzFNMytla0cwRGN5TGkvU0lsR2M5N1k3M0daOEV4cDRQMURDd0NMd2prR1RZRUpxa1l4MEpFd0I0T052elNoVWY2TEpHdUUyVXA5VDJtTGc4TjBnMU01cUxlY0VlQkFrL0JKWVZMSTBZOTA4ZklCSXlYbDRURDBuNmFCS0dveS9ERzZwZzc1ZWh6Nit4eVB0MTlYKzNIeElWZldrbm5UdmpDWElaRTZHeGQ3aXZKOGJyK1RVeVF5MVRTL1ZBQkova3p4QlFxd1JITE5jMzE5ZmpFVUUiLCJwYXlsb2FkIjoiZXlKd2NtOTBiMk52YkZabGNuTnBiMjRpT2lJekxqQWlMQ0p3Y205MmFXUmxja2xrWlc1MGFXWnBaWElpT2lKYVdsb2lMQ0p6ZEdGMGRYTWlPaUpqYjIxd2JHVjBaU0lzSW1odmJHUmxjaUk2ZXlKbWFYSnpkRTVoYldVaU9pSkNiMklpTENKcGJtWnBlQ0k2SWtSbElpd2liR0Z6ZEU1aGJXVWlPaUpDYjNWM1pYSWlMQ0ppYVhKMGFFUmhkR1VpT2lJeE9UWXdMVEF4TFRBeEluMHNJbVYyWlc1MGN5STZXM3NpZEhsd1pTSTZJbkpsWTI5MlpYSjVJaXdpZFc1cGNYVmxJam9pT1dNd01EbGpaVGcxTW1NNVlUUTJPVGxoTURZMFpHTXhNVE5sWlRZMFpEQmlNMkV3WWpsaE5pSXNJbWx6VTNCbFkybHRaVzRpT25SeWRXVXNJbkpsWTI5MlpYSjVJanA3SW1OdmRXNTBjbmtpT2lKT1RFUWlMQ0p6WVcxd2JHVkVZWFJsSWpvaU1qQXlNUzB3Tnkwd01pSXNJblpoYkdsa1JuSnZiU0k2SWpJd01qRXRNRGN0TURJaUxDSjJZV3hwWkZWdWRHbHNJam9pTWpBeU1pMHdNUzB4TVNKOWZWMTkifQ==","model":{"protocolVersion":"3.0","providerIdentifier":"ZZZ","status":"complete","holder":{"firstName":"Bob","infix":"De","lastName":"Bouwer","birthDate":"1960-01-01"},"events":[{"type":"recovery","unique":"9c009ce852c9a4699a064dc113ee64d0b3a0b9a6","isSpecimen":true,"recovery":{"country":"NLD","sampleDate":"2021-07-02","validFrom":"2021-07-02","validUntil":"2022-01-11"}}]}}
    private val moshi = Moshi.Builder()
    .add(RemoteTestStatusJsonAdapter())
    .add(Base64JsonAdapter())
    .add(JsonObjectJsonAdapter())
    .add(OffsetDateTimeJsonAdapter())
    .add(LocalDateJsonAdapter())
    .add(OriginTypeJsonAdapter())
    .add(RemoteCouplingStatusJsonAdapter())
    .add(PolymorphicJsonAdapterFactory.of(
        RemoteProtocol::class.java, "protocolVersion")
        .withSubtype(RemoteTestResult2::class.java, "2.0")
        .withSubtype(RemoteProtocol3::class.java, "3.0"))
    .add(PolymorphicJsonAdapterFactory.of(
        RemoteEvent::class.java, "type")
        .withSubtype(RemoteEventPositiveTest::class.java, "positivetest")
        .withSubtype(RemoteEventRecovery::class.java, "recovery")
        .withSubtype(RemoteEventNegativeTest::class.java, "negativetest")
        .withSubtype(RemoteEventVaccination::class.java, "vaccination"))
    .add(KotlinJsonAdapterFactory()).build()

    @Test
    fun `recovery event data are parsed correctly`() {
        val data = "{\"signature\":\"\",\"payload\":\"eyJwcm90b2NvbFZlcnNpb24iOiIzLjAiLCJwcm92aWRlcklkZW50aWZpZXIiOiJaWloiLCJzdGF0dXMiOiJjb21wbGV0ZSIsImhvbGRlciI6eyJmaXJzdE5hbWUiOiJCb2IiLCJpbmZpeCI6IkRlIiwibGFzdE5hbWUiOiJCb3V3ZXIiLCJiaXJ0aERhdGUiOiIxOTYwLTAxLTAxIn0sImV2ZW50cyI6W3sidHlwZSI6InJlY292ZXJ5IiwidW5pcXVlIjoiOWMwMDljZTg1MmM5YTQ2OTlhMDY0ZGMxMTNlZTY0ZDBiM2EwYjlhNiIsImlzU3BlY2ltZW4iOnRydWUsInJlY292ZXJ5Ijp7ImNvdW50cnkiOiJOTEQiLCJzYW1wbGVEYXRlIjoiMjAyMS0wNy0wMiIsInZhbGlkRnJvbSI6IjIwMjEtMDctMDIiLCJ2YWxpZFVudGlsIjoiMjAyMi0wMS0xMSJ9fV19\"}"

        val remoteUtil = RemoteEventHolderUtilImpl(moshi)

        val holder = remoteUtil.toRemoveEvent(data.toByteArray())

        assertEquals("1960-01-01", holder.birthDate)
        assertEquals("Bob", holder.firstName)
        assertEquals("Bouwer", holder.lastName)
        assertEquals("De", holder.infix)
    }
    
    @Test
    fun `two matching holders are not conflicting`() {
        val storedHolders = listOf(
            getHolderExample(),
        )

        val incomingHolders = listOf(
            getHolderExample(),
        )

        val remoteUtil = RemoteEventHolderUtilImpl(moshi)

        assertFalse(remoteUtil.conflicting(storedHolders, incomingHolders))
    }

    private fun getHolderExample() = RemoteProtocol3.Holder("De", "Jan", "Rijter", "1982-05-25")
}